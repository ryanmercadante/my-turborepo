# This workflow runs on pull requests to main branch
# It builds, tests, and deploys a preview environment using Vercel
# Key features:
# - Prevents parallel deployments with concurrency
# - Uses MySQL and Redis for testing
# - Deploys frontend to Vercel preview
# - Runs backend locally for testing
# - Uses Turborepo for efficient builds and caching

name: Pull Request
on:
  pull_request:
    branches: [main]

# Prevent parallel deployments
# - Groups deployments by workflow and PR
# - Cancels outdated deployments when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global environment variables
env:
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  NODE_VERSION: '20'
  PORT: 8000
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  WEB_PROJECT_ID: ${{ secrets.WEB_PROJECT_ID }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  # DATABASE_URL: mysql://root:root@localhost:3306/test
  # REDIS_URL: redis://localhost:6379

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent jobs from hanging indefinitely
    # services:
    #   mysql:
    #     image: mysql:8.0
    #     env:
    #       MYSQL_ROOT_PASSWORD: root
    #       MYSQL_DATABASE: test
    #     ports:
    #       - 3306:3306
    #     options: >-
    #       --health-cmd="mysqladmin ping"
    #       --health-interval=10s
    #       --health-timeout=5s
    #       --health-retries=3
    #     volumes:
    #       - mysql-data:/var/lib/mysql
    #   redis:
    #     image: redis:7.0
    #     ports:
    #       - 6379:6379
    #     options: >-
    #       --health-cmd="redis-cli ping"
    #       --health-interval=10s
    #       --health-timeout=5s
    #       --health-retries=3
    #     volumes:
    #       - redis-data:/data

    steps:
      # Setup
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Shallow clone for faster checkout

      # Setup Node and install dependencies
      - uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      # Cache Turborepo outputs for faster builds
      - name: Setup Turborepo
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            node_modules
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turbo-
        
      # Deploy frontend to Vercel preview environment
      - uses: ./.github/actions/deploy-preview
        id: deploy
        with:
          vercel-token: ${{ env.VERCEL_TOKEN }}
          turbo-token: ${{ env.TURBO_TOKEN }}
          vercel-project-id: ${{ env.WEB_PROJECT_ID }}
          vercel-org-id: ${{ env.VERCEL_ORG_ID }}
        
      # Start backend service for testing
      # - name: Start backend service
      #   run: yarn turbo dev --filter=@repo/api --no-daemon --no-deps
      #   env:
      #     DATABASE_URL: ${{ env.DATABASE_URL }}
      #     REDIS_URL: ${{ env.REDIS_URL }}
      #   background: true

      # - name: Wait for backend service
      #   run: |
      #     echo "Waiting for backend service to be ready..."
      #     while ! curl -s http://localhost:${{ env.PORT }}/health; do
      #       echo "Waiting for backend service..."
      #       sleep 1
      #     done
      #     echo "Backend service is ready!"

      - name: Run Playwright tests
        run: yarn turbo test
        env:
          NEXT_PUBLIC_API_URL: http://localhost:${{ env.PORT }}
          PLAYWRIGHT_TEST_BASE_URL: ${{ steps.deploy.outputs.preview-url }}
          TURBO_TOKEN: ${{ env.TURBO_TOKEN }}

# volumes:
#   mysql-data:
#   redis-data:
